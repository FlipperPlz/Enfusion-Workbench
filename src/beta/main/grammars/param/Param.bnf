{
    parserClass="com.flipperplz.enfusionWorkbench.languages.param.parser.ParamParser"

    extends="com.flipperplz.enfusionWorkbench.languages.param.psi.impl.ParamCompositeElementImpl"
    implements="com.flipperplz.enfusionWorkbench.languages.param.psi.ast.ParamCompositeElement"

    psiClassPrefix="GeneratedParam"
    psiImplClassSuffix="impl"
    psiPackage="com.flipperplz.enfusionWorkbench.languages.param.psi"
    psiImplPackage="com.flipperplz.enfusionWorkbench.languages.param.psi.impl"

    elementTypeHolderClass="com.flipperplz.enfusionWorkbench.languages.param.psi.ParamTypes"
    elementTypeClass="com.flipperplz.enfusionWorkbench.languages.param.psi.required.ParamElementType"
    tokenTypeClass="com.flipperplz.enfusionWorkbench.languages.param.psi.required.ParamTokenType"

    tokens = [
        SINGLE_LINE_COMMENT      = 'regexp://.*';
        EMPTY_DELIMITED_COMMENT  = 'regexp:/\*\*?/';
        DELIMITED_COMMENT        = 'regexp:/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/'
        ABS_IDENTIFIER   =  'regexp:[a-zA-Z_][a-zA-Z0-9_]*';
        ABS_STRING       =  'regexp:"(""|.)*"';
        ABS_NUMERIC      =  'regexp:(-?[0-9]+(.[0-9]+)?([eE][-+]?[0-9]+)?|0x[a-fA-F0-9]+)';
        ABS_WHITE_SPACE      = 'regexp:[\t\s]+';
    ]
    generate=[tokenAccessors="yes"]

    implements(".*Statement")="com.flipperplz.enfusionWorkbench.languages.param.psi.ast.ParamStatement"

}

file ::= statement* enumDeclaration?
{
    pin=1
}

classDeclaration ::= 'class' identifier regularClassDecl? ';'
{
    pin=2
    implements="com.flipperplz.enfusionWorkbench.languages.param.psi.contexts.ParamClassContext"
    extends="com.flipperplz.enfusionWorkbench.languages.param.psi.ext.ParamClass"
}

assignmentStatement ::= identifier (arrayAssignment | valueAssignment) ';'
{
    pin=1
    implements="com.flipperplz.enfusionWorkbench.languages.param.psi.contexts.ParamAssignmentContext"
    extends="com.flipperplz.enfusionWorkbench.languages.param.psi.ext.ParamAssignment"
};

deleteStatement ::= 'delete' identifier ';'
{
    pin=1
}

paramNumeric ::= ABS_NUMERIC
{
    implements="com.flipperplz.enfusionWorkbench.languages.param.psi.contexts.ParamNumericLiteralContext"
    extends="com.flipperplz.enfusionWorkbench.languages.param.psi.ext.ParamNumber"
}

paramString ::= ABS_STRING
{
    implements="com.flipperplz.enfusionWorkbench.languages.param.psi.contexts.ParamStringLiteralContext"
    extends="com.flipperplz.enfusionWorkbench.languages.param.psi.ext.ParamString"
};

literalArray ::= '{' arrayElement (',' (arrayElement | &'}'))* '}'
{
    pin(".*")=1
    implements="com.flipperplz.enfusionWorkbench.languages.param.psi.contexts.ParamArrayContext"
    extends="com.flipperplz.enfusionWorkbench.languages.param.psi.ext.ParamArray"
};

enumDeclaration ::= 'enum' '{' enumValue* '}' ';'
{
    pin=2
}

private literal ::= paramString | paramNumeric //| '__FILE__' | '__LINE__'

private statement ::=
    classDeclaration | deleteStatement | assignmentStatement
{
    recoverWhile="statementRecover"
};

private arrayAssignment ::= '[' ']' (
        '='  |
        '+=' |
        '-='
    ) literalArray
{
    pin=3
};

private valueAssignment ::= '=' literal { pin=1 };

private enumValue ::= identifier ('=' ABS_NUMERIC)?
{
    pin=1
}

private arrayElement ::= literal | literalArray
{
//    implements="com.flipperplz.enfusionWorkbench.languages.param.psi.ext.ParamArrayElement"
}

private statementRecover ::= !(';' | identifier)

inner regularClassDecl ::= (':' identifier)? '{' statement* '}'
{
    pin=2
}

identifier ::= ABS_IDENTIFIER
{
    extends="com.flipperplz.enfusionWorkbench.languages.param.psi.ext.ParamIdentifier"
    implements="com.flipperplz.enfusionWorkbench.languages.param.psi.contexts.ParamIdentifierContext"
}





