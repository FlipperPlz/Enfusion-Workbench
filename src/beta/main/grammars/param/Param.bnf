{
    parserClass="com.flipperplz.enfusionWorkbench.languages.param.parser.ParamParser"
    extends="com.flipperplz.enfusionWorkbench.languages.param.psi.impl.ParamPsiElementImpl"
    implements="com.flipperplz.enfusionWorkbench.languages.param.psi.ParamPsiElement"

    psiClassPrefix="Param"
    psiImplClassSuffix="Impl"
    psiPackage="com.flipperplz.enfusionWorkbench.languages.param.psi"
    psiImplPackage="com.flipperplz.enfusionWorkbench.languages.param.psi.impl"

    elementTypeHolderClass="com.flipperplz.enfusionWorkbench.languages.param.psi.ParamTypes"
    elementTypeClass="com.flipperplz.enfusionWorkbench.languages.param.psi.required.ParamElementType"
    tokenTypeClass="com.flipperplz.enfusionWorkbench.languages.param.psi.required.ParamTokenType"

    tokens = [
        SINGLE_LINE_COMMENT      = 'regexp://.*$';
        EMPTY_DELIMITED_COMMENT  = 'regexp:/\*\*?/';
        DELIMITED_COMMENT        = 'regexp:/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/'
    ]
    generate=[tokenAccessors="yes"]

    extends("numericLiteral|macro|parameterReference|stringLiteral")=literal
    extends("literal|arrayLiteral")=arrayElement
    extends(".*Statement|universalMacro")=statement
    extends("proceduralTexture")=stringContent
    extends("lineMacro|fileMacro|evaluateMacro|customMacro|executeMacro")=macro

//    implements("(class|parameter|delete)Statement|universalMacro|proceduralTexture(RightArgs|Function)")="com.flipperplz.enfusionWorkbench.languages.param.psi.ParamNamedPsiElement"
    mixin("stringLiteral")="com.flipperplz.enfusionWorkbench.languages.param.psi.mixins.ParamStringMixin"
    mixin(".*Macro|parameterReference")="com.flipperplz.enfusionWorkbench.languages.param.psi.mixins.ParamNonBinaraizableMixin"
}

file ::= statement+ enumDeclaration?

statement ::= ((
    deleteStatement |
    classStatement |
    parameterStatement //VERY AMBIGUOUS (STRING) LEAVE LAST
)   SYM_SEMI) | (universalMacro [SYM_SEMI]) {pin(".*")=1};

literal ::= {
    numericLiteral |
    macro |
    parameterReference |
    stringLiteral //VERY AMBIGUOUS LEAVE LAST
}

macro ::= (
    lineMacro |
    fileMacro |
    evaluateMacro |
    universalMacro
)

proceduralTexture ::= PROCEDURAL_TEXTURE_START proceduralTextureRightArgs proceduralTextureFunction {pin=1};
proceduralTextureFunction ::=
    identifier SYM_LPARENTHESIS [literal (SYM_COMMA literal)*] SYM_RPARENTHESIS
 {pin(".*")=1};

arrayElement ::= arrayLiteral | literal

arrayLiteral ::= SYM_LCURLY (arrayElement (SYM_COMMA arrayElement)*)? SYM_RCURLY {pin(".*")=1}

stringLiteral ::= (STRING_DOUBLE_START stringContent STRING_DOUBLE_END) |
                  (STRING_SINGLE_START stringContent STRING_SINGLE_END) |
                  (STRING_AMBIGUOUS_START stringContent STRING_AMBIGUOUS_END) {pin(".*")=1}

includeString ::= (STRING_INCLUDE_START stringContent STRING_INCLUDE_END) { pin(".*")=1 extends=stringLiteral }

evaluateMacro ::= MACRO_EVAL sqfTail {pin=1}

executeMacro ::= MACRO_EXEC sqfTail {pin=1}

classStatement ::= KW_CLASS identifier [[SYM_COLON identifier] SYM_LCURLY statement* SYM_RCURLY] {pin=1}

deleteStatement ::= KW_DELETE identifier {pin=1}

parameterReference ::= REFERENCE_MODE stringLiteral {pin=1}

parameterStatement ::= identifier (
    (arraySquare arrayOperator arrayLiteral) |
    (normalOperator literal)
) {pin=1}

enumDeclaration ::= KW_ENUM SYM_LCURLY (enumValue ((SYM_COMMA | NEWLINE | SYM_SEMI) enumValue)*) SYM_RCURLY SYM_SEMI {pin(".*")=1}
//helpers
enumValue ::= identifier [OP_ASSIGN numericLiteral] {pin=1}
identifier ::= ABS_IDENTIFIER
stringContent ::= proceduralTexture | (STRING_CONTENTS | LOCALIZED_STRING | STRING_ESCAPE)*;

numericLiteral ::= ABS_NUMERIC
lineMacro ::= MACRO_LINE
fileMacro ::= MACRO_FILE
customMacro ::= identifier [SYM_LPARENTHESIS macroArgument (SYM_COMMA macroArgument)* SYM_RPARENTHESIS] {pin(".*")=1}

//private helpers
private macroArgument ::= !(SYM_COMMA | SYM_RPARENTHESIS)
private sqfTail ::= SYM_LPARENTHESIS !(SYM_RPARENTHESIS) SYM_RPARENTHESIS {pin=1}
private normalOperator ::= OP_ASSIGN
private arrayOperator ::= normalOperator | OP_ADDASSIGN | OP_SUBASSIGN
private arraySquare ::= SYM_LSQUARE SYM_RSQUARE {pin=1}
private universalMacro ::= executeMacro | customMacro
private proceduralTextureRightArgs ::= (SYM_LPARENTHESIS
    (identifier SYM_COMMA numericLiteral SYM_COMMA numericLiteral SYM_COMMA numericLiteral)
SYM_RPARENTHESIS) {pin(".*")=1}