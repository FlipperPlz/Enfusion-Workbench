{
    parserClass="com.flipperplz.enfusionWorkbench.languages.param.parser.ParamParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Param"
    psiImplClassSuffix="impl"
    psiPackage="com.flipperplz.enfusionWorkbench.languages.param.psi"
    psiImplPackage="com.flipperplz.enfusionWorkbench.languages.param.psi.impl"

    elementTypeHolderClass="com.flipperplz.enfusionWorkbench.languages.param.psi.ParamTypes"
    elementTypeClass="com.flipperplz.enfusionWorkbench.languages.param.psi.ParamElementType"
    tokenTypeClass="com.flipperplz.enfusionWorkbench.languages.param.psi.ParamTokenType"

    tokens = [
        ABS_IDENTIFIER   =  'regexp:[a-zA-Z_][a-zA-Z0-9_]*';
        ABS_STRING       =  'regexp:"(""|.)*"';
        ABS_NUMERIC      =  'regexp:(-?[0-9]+(.[0-9]+)?([eE][-+]?[0-9]+)?|0x[a-fA-F0-9]+)';
        ABS_WHITE_SPACE      = 'regexp:[\t\s]+';
    ]

    extends(".*Statement")=statement

}

file ::= statement* enumDeclaration?

classDeclaration ::= 'class' ABS_IDENTIFIER regularClassDecl? ';' { pin=2 }
assignmentStatement ::= ABS_IDENTIFIER (arrayAssignment | valueAssignment) ';' { pin=1 };
deleteStatement ::= 'delete' ABS_IDENTIFIER ';' { pin=1 }
literal ::= ABS_STRING | ABS_NUMERIC | '__FILE__' | '__LINE__';
literalArray ::= '{' arrayElement (',' (arrayElement | &'}'))* '}' { pin(".*")=1 };

statement ::=
    classDeclaration | deleteStatement | assignmentStatement { recoverWhile="statementRecover" };

enumDeclaration ::= 'enum' '{' enumValue* '}' ';' { pin=2 }

private arrayAssignment ::= '[' ']' (
        '='  |
        '+=' |
        '-='
    ) literalArray { pin=3 };

private valueAssignment ::= '=' literal { pin=1 };

private enumValue ::= ABS_IDENTIFIER ('=' ABS_NUMERIC)? { pin=1 }

private arrayElement ::= literal | literalArray;

private statementRecover ::= !(';' | ABS_IDENTIFIER)

private inner regularClassDecl ::= (':' ABS_IDENTIFIER)? '{' statement* '}' { pin=2 }





