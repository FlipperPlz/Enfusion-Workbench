{
    parserClass="com.flipperplz.bisutils.languages.param.parser.ParamParser"
    parserUtilClass="com.flipperplz.bisutils.languages.param.parser.ParamParserUtil"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Param"
    psiImplClassSuffix="Impl"
    psiPackage="com.flipperplz.bisutils.languages.param.psi"
    psiImplPackage="com.flipperplz.bisutils.languages.param.psi.impl"

    elementTypeHolderClass="com.flipperplz.bisutils.languages.param.psi.ParamTypes"
    elementTypeClass="com.flipperplz.bisutils.languages.param.parser.ParamElementType"
    tokenTypeClass="com.flipperplz.bisutils.languages.param.lexer.ParamTokenType"

    tokens = [
        SYM_POUND                = '#';
        SYM_SEMI                 = ';';
        SYM_LPARENTHESIS         = '(';
        SYM_RPARENTHESIS         = ')';
        SYM_SQUOTE               = "regexp:'";
        SYM_DQUOTE               = "regexp:\"";
        SYM_COMMA                = ',';
        SYM_LCURLY               = '{';
        SYM_RCURLY               = '}';
        SYM_ASPERAND             = '@';
        KW_CLASS                 = 'class';
        KW_ENUM                  = 'enum';
        KW_DELETE                = 'delete';
        KW_INCLUDE               = 'include';
        KW_DEFINE                = 'define';
        KW_UNDEFINE              = 'undef';
        OP_ASSIGN                = '=';
        OP_ADDASSIGN             = '+=';
        OP_SUBASSIGN             = '-=';
        SYM_LSQUARE              = '[';
        SYM_RSQUARE              = ']';
        SINGLE_LINE_COMMENT      = 'regexp://.*$';
        EMPTY_DELIMITED_COMMENT  = 'regexp:/\*\*?/';
        DELIMITED_COMMENT        = 'regexp:/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/';
        ABS_IDENTIFIER           = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*';
        ABS_NUMERIC              = 'regexp:(-?[0-9]+(.[0-9]+)?([eE][-+]?[0-9]+)?|0x[a-fA-F0-9]+)';
        WHITESPACE               = 'regexp:[\s\t\r\n]';
        DIRECTIVE_NEWLINE        = 'regexp:\\[\r\n]'
        EOL                      = 'regexp:[\r\n]'
    ]
    generate=[tokenAccessors="yes"]
}

file ::= command* enumDeclaration?

command ::= statementWithSemi | preprocessorStatement

private statementWithSemi ::= statement SYM_SEMI {pin=1}
statement ::= deleteStatement        |
              classStatement         |
              externalClassStatement |
              parameterStatement
{
    extends=command
}

classStatement ::= KW_CLASS identifier [SYM_COLON identifier] SYM_LCURLY command* SYM_RCURLY
{
    pin(".*")=1
    extends="com.flipperplz.bisutils.languages.param.psi.impl.ParamPsiClassImpl"
    implements="com.flipperplz.bisutils.languages.param.psi.ParamPsiClass"
}

externalClassStatement ::= KW_CLASS identifier
{
    pin(".*")=1
    extends="com.flipperplz.bisutils.languages.param.psi.impl.ParamPsiExternalClassImpl"
    implements="com.flipperplz.bisutils.languages.param.psi.ParamPsiExternalClass"
}

deleteStatement ::= KW_DELETE identifier
{
    pin=1
    extends=statement
    implements="com.flipperplz.bisutils.languages.param.psi.ParamPsiNamedElement"
}

parameterStatement ::= identifier ((arraySquare arrayOperator arrayLiteral) | (normalOperator literal))
{
    pin(".*")=1
    extends=statement
    implements="com.flipperplz.bisutils.languages.param.psi.ParamPsiNamedElement"
}

preprocessorStatement ::= defineDirective | undefineDirective | pureDirective
{
    extends=command
    implements=command
}

defineDirective ::=  DIRECTIVE_START KW_DEFINE macroSignature DEFINE_VALUE
{
    pin=2
    extends=preprocessorStatement
}

literal ::= (
    numericLiteral |
    pureDirective |
    parameterReference |
    stringLiteral
)

undefineDirective ::= DIRECTIVE_START KW_UNDEFINE identifier
{
    pin=2
    extends=preprocessorStatement
}


pureDirective ::= includeDirective | customMacro
{
    extends=literal
}

customMacro ::=  macroName [SYM_LPARENTHESIS macroArgument (SYM_COMMA macroArgument)* SYM_RPARENTHESIS]
{
    pin(".*")=1
    extends=pureDirective
}

macroArgument ::= SYM_LPARENTHESIS macroArgument SYM_RPARENTHESIS | customMacro | (!(SYM_COMMA | SYM))+
{
    pin(".*")=1
}

external macroName ::= parseMacroName
{
    extends=identifier
}

numericLiteral ::= ABS_NUMERIC
{
    extends=literal
}

identifier ::= ABS_IDENTIFIER
{
    mixin="com.flipperplz.bisutils.languages.param.psi.mixin.ParamIdentifierMixin"
    implements="com.intellij.psi.PsiNamedElement"
}

includeDirective ::= DIRECTIVE_START KW_INCLUDE (stringLiteral | includeString)
{
    pin=2
    extends=pureDirective
}

stringContent ::= (STRING_CONTENTS | LOCALIZED_STRING | STRING_ESCAPE)+ ;
parameterReference ::= REFERENCE_MODE stringLiteral
{
    pin=1
    extends=literal
}


stringLiteral ::= doubleString | singleString | unquotedString
{
    extends=literal
}

arrayElement ::= arrayLiteral | literal
arrayLiteral ::= SYM_LCURLY (arrayElement (SYM_COMMA arrayElement)*)? SYM_RCURLY
{
    pin(".*")=1
    extends=literal
}

private unquotedString ::= stringContent
{
    extends=stringLiteral
}

private doubleString ::= SYM_DQUOTE stringContent SYM_DQUOTE
{
    pin=1
    extends=stringLiteral
}

private singleString ::= SYM_SQUOTE stringContent SYM_SQUOTE
{
    pin=1
    extends=stringLiteral
}

includeString ::= SYM_LANGLE stringContent SYM_RANGLE
{
    pin=1
    extends=stringLiteral
}

enumDeclaration ::= KW_ENUM SYM_LCURLY (enumValue ((SYM_COMMA | EOL | SYM_SEMI) enumValue)*) SYM_RCURLY SYM_SEMI {pin(".*")=1}

enumValue ::= identifier [OP_ASSIGN numericLiteral]
{
    pin(".*")=1
}
//customMacro ::= identifier [SYM_LPARENTHESIS macroArgument (SYM_COMMA macroArgument)* SYM_RPARENTHESIS] {pin(".*")=1}

macroSignature ::= identifier [SYM_LPARENTHESIS identifier (SYM_COMMA identifier)* SYM_RPARENTHESIS]
{
    pin(".*")=1
}

private normalOperator ::= OP_ASSIGN
private arrayOperator ::= normalOperator | OP_ADDASSIGN | OP_SUBASSIGN
private arraySquare ::= SYM_LSQUARE SYM_RSQUARE
{
    pin=1
}