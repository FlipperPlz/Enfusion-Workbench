{
    parserClass="com.flipperplz.enfusionWorkbench.languages.param.parser.ParamParser"
    parserUtilClass="com.flipperplz.enfusionWorkbench.languages.param.parser.ParamParserUtil"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="ParamG"
    psiImplClassSuffix="Impl"
    psiPackage="com.flipperplz.enfusionWorkbench.languages.param.psi"
    psiImplPackage="com.flipperplz.enfusionWorkbench.languages.param.psi.impl"

    elementTypeHolderClass="com.flipperplz.enfusionWorkbench.languages.param.psi.ParamTypes"
    elementTypeClass="com.flipperplz.enfusionWorkbench.languages.param.parser.ParamElementType"
    tokenTypeClass="com.flipperplz.enfusionWorkbench.languages.param.lexer.ParamTokenType"

    implements(".*")="com.flipperplz.enfusionWorkbench.languages.param.psi.ParamPsiElement"

    tokens = [
        SYM_SEMI                 = ';';
        SYM_DQUOTE               = "regexp:\"";
        SYM_COMMA                = ',';
        SYM_LCURLY               = '{';
        SYM_RCURLY               = '}';
        KW_CLASS                 = 'class';
        KW_ENUM                  = 'enum';
        KW_DELETE                = 'delete';
        OP_ASSIGN                = '=';
        OP_ADDASSIGN             = '+=';
        OP_SUBASSIGN             = '-=';
        SYM_LSQUARE              = '[';
        SYM_RSQUARE              = ']';
        SINGLE_LINE_COMMENT      = 'regexp://.*$';
        EMPTY_DELIMITED_COMMENT  = 'regexp:/\*\*?/';
        DELIMITED_COMMENT        = 'regexp:/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/';
        ABS_IDENTIFIER           = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*';
        ABS_NUMERIC              = 'regexp:(-?[0-9]+(.[0-9]+)?([eE][-+]?[0-9]+)?|0x[a-fA-F0-9]+)';
        WHITESPACE               = 'regexp:[\s\t\r\n]';
        EOL                      = 'regexp:[\r\n]'
    ]
    generate=[tokenAccessors="yes"]
}

file ::= statementWithSemi*

private statementWithSemi ::= statement SYM_SEMI
{
    pin=1
}
statement ::= deleteStatement        |
              classStatement         |
              externalClassStatement |
              parameterStatement |
              enumDeclaration
{
    implements="com.flipperplz.bisutils.param.node.ParamStatement"
}

classStatement ::= KW_CLASS identifier [SYM_COLON identifier] SYM_LCURLY statementWithSemi* SYM_RCURLY
{
    pin(".*")=1
    extends=externalClassStatement
    mixin="com.flipperplz.enfusionWorkbench.languages.param.psi.mixin.ParamGClassStatementMixin"
    implements="com.flipperplz.bisutils.param.statement.ParamClass"
}

externalClassStatement ::= KW_CLASS identifier
{
    pin(".*")=1
    extends=statement
    mixin="com.flipperplz.enfusionWorkbench.languages.param.psi.mixin.ParamGExternalClassStatementMixin"
    implements="com.flipperplz.bisutils.param.statement.ParamExternalClass"
}

deleteStatement ::= KW_DELETE identifier
{
    pin=1
    extends=statement
    mixin="com.flipperplz.enfusionWorkbench.languages.param.psi.mixin.ParamGDeleteStatementMixin"
    implements="com.flipperplz.bisutils.param.statement.ParamDeleteStatement"
}

parameterStatement ::= identifier ((arraySquare arrayOperator arrayLiteral) | (normalOperator literal))
{
    pin(".*")=1
    extends=statement
    implements="com.flipperplz.bisutils.param.statement.ParamVariableStatement"
}

literal ::= numericLiteral | stringLiteral
{
    implements="com.flipperplz.bisutils.param.node.ParamLiteralBase"
}

numericLiteral ::= ABS_NUMERIC
{
    extends=literal
    implements="com.flipperplz.bisutils.param.node.ParamNumerical"
}

stringLiteral ::= (SYM_DQUOTE (quoteEscape | !SYM_DQUOTE)* SYM_DQUOTE) |
                  (!(SYM_RCURLY | SYM_SEMI | EOL | EOF ))*
{
    pin(".*")=1
    extends=literal
    implements="com.flipperplz.bisutils.param.literal.ParamString"
}

identifier ::= ABS_IDENTIFIER
{
    implements="com.intellij.psi.PsiNamedElement"
}

arrayElement ::= arrayLiteral | literal
{
    extends=literal
}

arrayLiteral ::= SYM_LCURLY (arrayElement (SYM_COMMA arrayElement)*)? SYM_RCURLY
{
    pin(".*")=1
    extends=arrayElement
    mixin="com.flipperplz.enfusionWorkbench.languages.param.psi.mixin.ParamGArrayLiteralMixin"
    implements="com.flipperplz.bisutils.param.literal.ParamArray"
}

enumDeclaration ::= KW_ENUM SYM_LCURLY (enumValue ((SYM_COMMA | EOL | SYM_SEMI) enumValue)*) SYM_RCURLY SYM_SEMI
{
    pin(".*")=1
    extends=statement
    mixin="com.flipperplz.enfusionWorkbench.languages.param.psi.mixin.ParamGEnumDeclarationMixin"
    implements="com.flipperplz.bisutils.param.statement.ParamEnum"
}

enumValue ::= identifier [OP_ASSIGN numericLiteral]
{
    pin(".*")=1
}

private normalOperator ::= OP_ASSIGN
private arrayOperator ::= normalOperator | OP_ADDASSIGN | OP_SUBASSIGN

private quoteEscape ::= SYM_DQUOTE SYM_DQUOTE
{
    pin=1
}

private arraySquare ::= SYM_LSQUARE SYM_RSQUARE
{
    pin=1
}